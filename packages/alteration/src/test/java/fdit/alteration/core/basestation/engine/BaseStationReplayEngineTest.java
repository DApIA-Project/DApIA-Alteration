package fdit.alteration.core.basestation.engine;

import com.google.common.io.Files;
import fdit.alteration.core.engine.EngineManager;
import fdit.alteration.core.logging.ActionLogger;
import org.junit.Test;

import java.io.File;
import java.util.List;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.io.Files.write;
import static fdit.alteration.core.basestation.BaseStationParser.strDateToTimestamp;
import static fdit.alteration.core.incident.IncidentHelper.*;
import static fdit.alteration.core.incident.Parameter.*;
import static java.io.File.createTempFile;
import static java.nio.charset.StandardCharsets.UTF_8;
import static java.util.Arrays.stream;
import static org.junit.Assert.assertEquals;

public class BaseStationReplayEngineTest {

    @Test
    public void applyAction_replay_BST() throws Exception {
        final File initialRecording = createTempFile("initial", ".bst");
        final File sourceRecording = createTempFile("source", ".bst");
        write("MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0",
                initialRecording,
                UTF_8);
        write("MSG,0,30,2303,406E66,3838,2018/02/28,16:07:24.656,2018/02/28,16:07:24.905,,,389.8,321.2,,,-896,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:25.070,2018/02/28,16:07:25.903,,,402.2,121.5,,,-1984,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:25.467,2018/02/28,16:07:26.903,,17725,,,46.57736,5.72837,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.070,2018/02/28,16:07:26.903,,,389.8,321.2,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.271,2018/02/28,16:07:27.903,,34650,,,47.42942,5.07751,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.671,2018/02/28,16:07:28.903,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:27.071,2018/02/28,16:07:28.903,,34650,,,47.42998,5.07688,,,0,0,0,0\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:27.076,2018/02/28,16:07:29.906,,,405.2,123.7,,,-2048,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:27.489,2018/02/28,16:07:29.906,,17700,,,46.57626,5.73067,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:27.579,2018/02/28,16:07:30.906,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.489,2018/02/28,16:07:31.906,,34625,,,47.43138,5.07519,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.689,2018/02/28,16:07:33.906,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.998,2018/02/28,16:07:35.902,,34600,,,47.43333,5.07287,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:29.106,2018/02/28,16:07:36.902,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:39.145,2018/02/28,16:07:37.906,,,388.4,321.3,,,-960,,,,,",
                sourceRecording,
                UTF_8);
        final String expectedRecording = "MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:32.987,2018/02/28,16:04:33.236,,,389.8,321.2,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:34.401,2018/02/28,16:04:35.234,,,389.8,321.2,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:34.602,2018/02/28,16:04:36.234,,34650,,,47.42942,5.07751,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.002,2018/02/28,16:04:37.234,,,388.4,321.3,,,-896,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.402,2018/02/28,16:04:37.234,,34650,,,47.42998,5.07688,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.910,2018/02/28,16:04:39.237,,,388.4,321.3,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0";
        final EngineManager engineManager = new EngineManager(
                recording(initialRecording, 1519833870987L),
                newArrayList(replay(timeWindow(2000, 5000),
                        parameters(bstTarget("406E66"), sourceRecording.getPath()))),
                new ActionLogger());
        final String resultRecording = Files.toString(engineManager.run(), UTF_8);
        final Pattern pattern = Pattern.compile("^MSG,0,30,2303,406E66,3838.*$");
        List<String> allReplayedMsg =
                stream(resultRecording.split("\\r?\\n")).filter(s -> pattern.matcher(s).matches()).collect(Collectors.toList());

        // Le bon nombre de messages de la bonne target ont été extraits du recording source
        assertEquals(6, allReplayedMsg.size());

        // La date du premier message rejoué a bien été readaptée
        String[] firstResultMsg = allReplayedMsg.get(0).split(",");
        assertEquals(strDateToTimestamp("2018/02/28,16:04:30.987") + 2000, strDateToTimestamp(firstResultMsg[6] + "," + firstResultMsg[7]));

        //Comparaison sale (pour non-regression on va dire)
        assertEquals(expectedRecording.trim(), resultRecording.trim());
    }

    @Test
    public void applyAction_replay_BST_coordinateOffset() throws Exception {
        final File initialRecording = createTempFile("initial", ".bst");
        final File sourceRecording = createTempFile("source", ".bst");
        write("MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0",
                initialRecording,
                UTF_8);
        write("MSG,0,30,2303,406E66,3838,2018/02/28,16:07:24.656,2018/02/28,16:07:24.905,,,389.8,321.2,,,-896,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:25.070,2018/02/28,16:07:25.903,,,402.2,121.5,,,-1984,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:25.467,2018/02/28,16:07:26.903,,17725,,,46.57736,5.72837,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.070,2018/02/28,16:07:26.903,,,389.8,321.2,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.271,2018/02/28,16:07:27.903,,34650,,,47.42942,5.07751,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.671,2018/02/28,16:07:28.903,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:27.071,2018/02/28,16:07:28.903,,34650,,,47.42998,5.07688,,,0,0,0,0\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:27.076,2018/02/28,16:07:29.906,,,405.2,123.7,,,-2048,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:27.489,2018/02/28,16:07:29.906,,17700,,,46.57626,5.73067,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:27.579,2018/02/28,16:07:30.906,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.489,2018/02/28,16:07:31.906,,34625,,,47.43138,5.07519,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.689,2018/02/28,16:07:33.906,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.998,2018/02/28,16:07:35.902,,34600,,,47.43333,5.07287,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:29.106,2018/02/28,16:07:36.902,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:39.145,2018/02/28,16:07:37.906,,,388.4,321.3,,,-960,,,,,",
                sourceRecording,
                UTF_8);
        final String expectedRecording = "MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:32.987,2018/02/28,16:04:33.236,,,389.8,321.2,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:34.401,2018/02/28,16:04:35.234,,,389.8,321.2,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:34.602,2018/02/28,16:04:36.234,,34650,,,48.02942,4.07751,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.002,2018/02/28,16:04:37.234,,,388.4,321.3,,,-896,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.402,2018/02/28,16:04:37.234,,34650,,,48.02998,4.07688,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.910,2018/02/28,16:04:39.237,,,388.4,321.3,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0";
        final EngineManager engineManager = new EngineManager(recording(initialRecording, 1519833870987L),
                newArrayList(replay(timeWindow(2000, 5000),
                        parameters(
                                bstTarget("406E66"),
                                sourceRecording.getPath(),
                                parameter(CHARAC_LATITUDE, "0.6", MODE_OFFSET),
                                parameter(CHARAC_LONGITUDE, "-1", MODE_OFFSET)))),
                new ActionLogger());
        final String resultRecording = Files.toString(engineManager.run(), UTF_8);
        Pattern p = Pattern.compile("^MSG,0,30,2303,406E66,3838.*$");
        List<String> allReplayedMsg =
                stream(resultRecording.split("\\r?\\n")).filter(s -> p.matcher(s).matches()).collect(Collectors.toList());

        // Le bon nombre de messages de la bonne target ont été extraits du recording source
        assertEquals(6, allReplayedMsg.size());

        // La date du premier message rejoué a bien été readaptée
        String[] firstResultMsg = allReplayedMsg.get(0).split(",");
        assertEquals(strDateToTimestamp("2018/02/28,16:04:30.987") + 2000, strDateToTimestamp(firstResultMsg[6] + "," + firstResultMsg[7]));

        //Comparaison sale (pour non-regression on va dire)
        assertEquals(expectedRecording.trim(), resultRecording.trim());
    }

    @Test
    public void applyAction_replay_SBS() throws Exception {
        final File initialRecording = createTempFile("initial", ".sbs");
        final File sourceRecording = createTempFile("source", ".sbs");
        write("MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0",
                initialRecording,
                UTF_8);
        write("MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0",
                sourceRecording,
                UTF_8);
        final String expectedRecording = "MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,406E66,3839,2018/02/28,16:04:32.987,2018/02/28,16:04:33.888,,,414.1,333,,,64,,,,,\n"+
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                "MSG,0,30,1105,406E66,3839,2018/02/28,16:04:33.987,2018/02/28,16:04:34.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                "MSG,0,30,1105,AAAAAA,3839,2018/02/28,16:04:33.987,2018/02/28,16:04:34.888,,,414.1,333,,,64,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,406E66,3839,2018/02/28,16:04:34.391,2018/02/28,16:04:35.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                "MSG,0,30,1105,406E66,3839,2018/02/28,16:04:34.590,2018/02/28,16:04:36.888,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,AAAAAA,3839,2018/02/28,16:04:34.987,2018/02/28,16:04:35.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                "MSG,0,30,1105,AAAAAA,3839,2018/02/28,16:04:35.391,2018/02/28,16:04:36.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                "MSG,0,30,1105,AAAAAA,3839,2018/02/28,16:04:35.590,2018/02/28,16:04:37.888,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                "MSG,0,30,1105,406E66,3839,2018/02/28,16:04:35.801,2018/02/28,16:04:37.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0\n" +
                "MSG,0,30,1105,AAAAAA,3839,2018/02/28,16:04:36.801,2018/02/28,16:04:38.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                "MSG,0,30,1105,AAAAAA,3839,2018/02/28,16:04:36.998,2018/02/28,16:04:39.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,AAAAAA,3839,2018/02/28,16:04:37.404,2018/02/28,16:04:40.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                "MSG,0,30,1105,AAAAAA,3839,2018/02/28,16:04:37.607,2018/02/28,16:04:41.894,,,415,333.1,,,0,,,,,\n";
        final EngineManager engineManager = new EngineManager(
                recording(initialRecording, 1519833870987L),
                newArrayList(replay(timeWindow(2000,5000),
                                parameters(bstTarget("300065"), sourceRecording.getPath(),parameter("hexIdent","406E66"))),
                            replay(timeWindow(3000,7000),
                                parameters(bstTarget("300065"), sourceRecording.getPath(),parameter("hexIdent","AAAAAA")))),
                new ActionLogger());
        final String resultRecording = Files.toString(engineManager.run(), UTF_8);
        final Pattern pattern = Pattern.compile("^MSG,0,30,1105,406E66,3839.*$");
        List<String> allReplayedMsg =
                stream(resultRecording.split("\\r?\\n")).filter(s -> pattern.matcher(s).matches()).collect(Collectors.toList());

        final Pattern pattern2 = Pattern.compile("^MSG,0,30,1105,AAAAAA,3839.*$");
        List<String> allReplayedMsg2 =
                stream(resultRecording.split("\\r?\\n")).filter(s -> pattern2.matcher(s).matches()).collect(Collectors.toList());

        // Le bon nombre de messages de la bonne target ont été extraits du recording source
        assertEquals(5, allReplayedMsg.size());
        assertEquals(8, allReplayedMsg2.size());

        // La date du premier message rejoué a bien été readaptée
        String[] firstResultMsg = allReplayedMsg.get(0).split(",");
        assertEquals(strDateToTimestamp("2018/02/28,16:04:30.987") + 2000, strDateToTimestamp(firstResultMsg[6] + "," + firstResultMsg[7]));

        String[] firstResultMsg2 = allReplayedMsg2.get(0).split(",");
        assertEquals(strDateToTimestamp("2018/02/28,16:04:30.987") + 3000, strDateToTimestamp(firstResultMsg2[6] + "," + firstResultMsg2[7]));

        //Comparaison sale (pour non-regression on va dire)
        assertEquals(expectedRecording.trim(), resultRecording.trim());
    }

    @Test
    public void applyAction_replay_SBS_Without_ICAO() throws Exception {
        final File initialRecording = createTempFile("initial", ".sbs");
        final File sourceRecording = createTempFile("source", ".sbs");
        write("MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0",
                initialRecording,
                UTF_8);
        write("MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0",
                sourceRecording,
                UTF_8);
        final String expectedRecording = "MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.987,2018/02/28,16:04:33.888,,,414.1,333,,,64,,,,,\n"+
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.987,2018/02/28,16:04:34.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.987,2018/02/28,16:04:34.888,,,414.1,333,,,64,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.391,2018/02/28,16:04:35.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.590,2018/02/28,16:04:36.888,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.987,2018/02/28,16:04:35.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.391,2018/02/28,16:04:36.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.590,2018/02/28,16:04:37.888,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.801,2018/02/28,16:04:37.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.801,2018/02/28,16:04:38.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.998,2018/02/28,16:04:39.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:37.404,2018/02/28,16:04:40.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:37.607,2018/02/28,16:04:41.894,,,415,333.1,,,0,,,,,\n";
        final EngineManager engineManager = new EngineManager(
                recording(initialRecording, 1519833870987L),
                newArrayList(replay(timeWindow(2000,5000),
                                parameters(bstTarget("300065"), sourceRecording.getPath())),
                        replay(timeWindow(3000,7000),
                                parameters(bstTarget("300065"), sourceRecording.getPath()))),
                new ActionLogger());
        final String resultRecording = Files.toString(engineManager.run(), UTF_8);
        final Pattern pattern = Pattern.compile("^MSG,0,30,1105,300065,3839.*$");
        List<String> allReplayedMsg =
                stream(resultRecording.split("\\r?\\n")).filter(s -> pattern.matcher(s).matches()).collect(Collectors.toList());

        // Le bon nombre de messages de la bonne target ont été extraits du recording source
        assertEquals(24, allReplayedMsg.size());

      
        //Comparaison sale (pour non-regression on va dire)
        assertEquals(expectedRecording.trim(), resultRecording.trim());
    }

    @Test
    public void applyAction_replay_SBS_2() throws Exception {
        final File initialRecording = createTempFile("initial", ".sbs");
        final File sourceRecording = createTempFile("source", ".sbs");
        write("MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:08:57.000000,2022/07/01,05:08:57.000000,SAMUCF,550.0,66.0,303.20657031508955,43.61418643240201,1.3985988071986606,192.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:08:58.000000,2022/07/01,05:08:58.000000,SAMUCF,550.0,67.0,300.3791260113683,43.614279536877646,1.398468017578125,192.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:08:59.000000,2022/07/01,05:08:59.000000,SAMUCF,575.0,69.0,296.565051177078,43.614512298066735,1.3978794642857142,320.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:00.000000,2022/07/01,05:09:00.000000,SAMUCF,575.0,71.0,292.2490236572124,43.614605402542374,1.3974870954241072,384.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:01.000000,2022/07/01,05:09:01.000000,SAMUCF,575.0,74.0,288.92464441605125,43.614715576171875,1.396988269894622,448.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:02.000000,2022/07/01,05:09:02.000000,SAMUCF,600.0,76.0,285.3215100748648,43.614791611493644,1.3965715680803572,448.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:03.000000,2022/07/01,05:09:03.000000,SAMUCF,600.0,78.0,282.6086067933662,43.614898681640625,1.3960940338844479,448.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:04.000000,2022/07/01,05:09:04.000000,SAMUCF,600.0,80.0,278.63713141507077,43.614931268207094,1.3955906459263392,448.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:05.000000,2022/07/01,05:09:05.000000,SAMUCF,600.0,81.0,274.9392155421262,43.61497782044491,1.3950674874441964,384.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:06.000000,2022/07/01,05:09:06.000000,SAMUCF,625.0,83.0,271.38035407344444,43.61497782044491,1.3945443289620536,384.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:07.000000,2022/07/01,05:09:07.000000,SAMUCF,625.0,85.0,267.3057157101439,43.61494445800781,1.3939223178597384,384.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:08.000000,2022/07/01,05:09:08.000000,SAMUCF,625.0,86.0,264.0256767135194,43.614898681640625,1.3934113258539245,384.0,7015,0,0,0,0",
                initialRecording,
                UTF_8);
        write("MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:08:57.000000,2022/07/01,05:08:57.000000,SAMUCF,550.0,66.0,303.20657031508955,43.61418643240201,1.3985988071986606,192.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:08:58.000000,2022/07/01,05:08:58.000000,SAMUCF,550.0,67.0,300.3791260113683,43.614279536877646,1.398468017578125,192.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:08:59.000000,2022/07/01,05:08:59.000000,SAMUCF,575.0,69.0,296.565051177078,43.614512298066735,1.3978794642857142,320.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:00.000000,2022/07/01,05:09:00.000000,SAMUCF,575.0,71.0,292.2490236572124,43.614605402542374,1.3974870954241072,384.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:01.000000,2022/07/01,05:09:01.000000,SAMUCF,575.0,74.0,288.92464441605125,43.614715576171875,1.396988269894622,448.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:02.000000,2022/07/01,05:09:02.000000,SAMUCF,600.0,76.0,285.3215100748648,43.614791611493644,1.3965715680803572,448.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:03.000000,2022/07/01,05:09:03.000000,SAMUCF,600.0,78.0,282.6086067933662,43.614898681640625,1.3960940338844479,448.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:04.000000,2022/07/01,05:09:04.000000,SAMUCF,600.0,80.0,278.63713141507077,43.614931268207094,1.3955906459263392,448.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:05.000000,2022/07/01,05:09:05.000000,SAMUCF,600.0,81.0,274.9392155421262,43.61497782044491,1.3950674874441964,384.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:06.000000,2022/07/01,05:09:06.000000,SAMUCF,625.0,83.0,271.38035407344444,43.61497782044491,1.3945443289620536,384.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:07.000000,2022/07/01,05:09:07.000000,SAMUCF,625.0,85.0,267.3057157101439,43.61494445800781,1.3939223178597384,384.0,7015,0,0,0,0\n" +
                        "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:08.000000,2022/07/01,05:09:08.000000,SAMUCF,625.0,86.0,264.0256767135194,43.614898681640625,1.3934113258539245,384.0,7015,0,0,0,0",
                sourceRecording,
                UTF_8);
        final String expectedRecording = "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:08:57.000,2022/07/01,05:08:57.000,SAMUCF,550,66,303.2,43.61419,1.3986,192,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:08:58.000,2022/07/01,05:08:58.000,SAMUCF,550,67,300.4,43.61428,1.39847,192,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:08:59.000,2022/07/01,05:08:59.000,SAMUCF,575,69,296.6,43.61451,1.39788,320,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:00.000,2022/07/01,05:09:00.000,SAMUCF,575,71,292.2,43.61461,1.39749,384,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:01.000,2022/07/01,05:09:01.000,SAMUCF,575,74,288.9,43.61472,1.39699,448,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:02.000,2022/07/01,05:09:02.000,SAMUCF,600,76,285.3,43.61479,1.39657,448,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,DDDDDD,5022202,2022/07/01,05:09:02.000,2022/07/01,05:09:02.000,SAMU25,550,66,303.2,43.61419,1.3986,192,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:03.000,2022/07/01,05:09:03.000,SAMUCF,600,78,282.6,43.6149,1.39609,448,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,DDDDDD,5022202,2022/07/01,05:09:03.000,2022/07/01,05:09:03.000,SAMU25,550,67,300.4,43.61428,1.39847,192,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:04.000,2022/07/01,05:09:04.000,SAMUCF,600,80,278.6,43.61493,1.39559,448,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,DDDDDD,5022202,2022/07/01,05:09:04.000,2022/07/01,05:09:04.000,SAMU25,575,69,296.6,43.61451,1.39788,320,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:05.000,2022/07/01,05:09:05.000,SAMUCF,600,81,274.9,43.61498,1.39507,384,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,DDDDDD,5022202,2022/07/01,05:09:05.000,2022/07/01,05:09:05.000,SAMU25,575,71,292.2,43.61461,1.39749,384,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:06.000,2022/07/01,05:09:06.000,SAMUCF,625,83,271.4,43.61498,1.39454,384,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,DDDDDD,5022202,2022/07/01,05:09:06.000,2022/07/01,05:09:06.000,SAMU25,575,74,288.9,43.61472,1.39699,448,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:07.000,2022/07/01,05:09:07.000,SAMUCF,625,85,267.3,43.61494,1.39392,384,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,AAAAAA,5022202,2022/07/01,05:09:07.000,2022/07/01,05:09:07.000,SAMU70,550,66,303.2,43.61419,1.3986,192,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,DDDDDD,5022202,2022/07/01,05:09:07.000,2022/07/01,05:09:07.000,SAMU25,600,76,285.3,43.61479,1.39657,448,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,39ac45,5022202,2022/07/01,05:09:08.000,2022/07/01,05:09:08.000,SAMUCF,625,86,264,43.6149,1.39341,384,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,AAAAAA,5022202,2022/07/01,05:09:08.000,2022/07/01,05:09:08.000,SAMU70,550,67,300.4,43.61428,1.39847,192,7015,0,0,0,0\n" +
                "MSG,3,3,5022202,DDDDDD,5022202,2022/07/01,05:09:08.000,2022/07/01,05:09:08.000,SAMU25,600,78,282.6,43.6149,1.39609,448,7015,0,0,0,0\n";


        final EngineManager engineManager = new EngineManager(
                recording(initialRecording, 1656652137000L),
                newArrayList(replay(timeWindow(5000,11000),
                                parameters(bstTarget("39ac45"), sourceRecording.getPath(),parameter("hexIdent","DDDDDD"),parameter("callsign","SAMU25"))),
                        replay(timeWindow(10000,11000),
                                parameters(bstTarget("39ac45"), sourceRecording.getPath(),parameter("hexIdent","AAAAAA"),parameter("callsign","SAMU70")))),
                new ActionLogger());
        final String resultRecording = Files.toString(engineManager.run(), UTF_8);
        final Pattern pattern = Pattern.compile("^MSG,3,3,5022202,DDDDDD,5022202.*$");
        List<String> allReplayedMsg =
                stream(resultRecording.split("\\r?\\n")).filter(s -> pattern.matcher(s).matches()).collect(Collectors.toList());

        final Pattern pattern2 = Pattern.compile("^MSG,3,3,5022202,AAAAAA,5022202.*$");
        List<String> allReplayedMsg2 =
                stream(resultRecording.split("\\r?\\n")).filter(s -> pattern2.matcher(s).matches()).collect(Collectors.toList());

        // Le bon nombre de messages de la bonne target ont été extraits du recording source
        assertEquals(7, allReplayedMsg.size());
        assertEquals(2, allReplayedMsg2.size());

        // La date du premier message rejoué a bien été readaptée
        String[] firstResultMsg = allReplayedMsg.get(0).split(",");
        assertEquals(strDateToTimestamp("2022/07/01,05:08:57.000000") + 5000, strDateToTimestamp(firstResultMsg[6] + "," + firstResultMsg[7]));

        String[] firstResultMsg2 = allReplayedMsg2.get(0).split(",");
        assertEquals(strDateToTimestamp("2022/07/01,05:08:57.000000") + 10000, strDateToTimestamp(firstResultMsg2[6] + "," + firstResultMsg2[7]));

        //Comparaison sale (pour non-regression on va dire)
        assertEquals(expectedRecording.trim(), resultRecording.trim());
    }


}
