package fdit.alteration.core.basestation.engine;

import com.google.common.io.Files;
import fdit.alteration.core.engine.EngineManager;
import fdit.alteration.core.logging.ActionLogger;
import org.junit.Test;

import java.io.File;
import java.util.List;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.io.Files.write;
import static fdit.alteration.core.basestation.BaseStationParser.strDateToTimestamp;
import static fdit.alteration.core.incident.IncidentHelper.*;
import static fdit.alteration.core.incident.Parameter.*;
import static java.io.File.createTempFile;
import static java.nio.charset.StandardCharsets.UTF_8;
import static java.util.Arrays.stream;
import static org.junit.Assert.assertEquals;

public class BaseStationReplayEngineTest {

    @Test
    public void applyAction_replay_BST() throws Exception {
        final File initialRecording = createTempFile("initial", ".bst");
        final File sourceRecording = createTempFile("source", ".bst");
        write("MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0",
                initialRecording,
                UTF_8);
        write("MSG,0,30,2303,406E66,3838,2018/02/28,16:07:24.656,2018/02/28,16:07:24.905,,,389.8,321.2,,,-896,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:25.070,2018/02/28,16:07:25.903,,,402.2,121.5,,,-1984,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:25.467,2018/02/28,16:07:26.903,,17725,,,46.57736,5.72837,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.070,2018/02/28,16:07:26.903,,,389.8,321.2,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.271,2018/02/28,16:07:27.903,,34650,,,47.42942,5.07751,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.671,2018/02/28,16:07:28.903,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:27.071,2018/02/28,16:07:28.903,,34650,,,47.42998,5.07688,,,0,0,0,0\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:27.076,2018/02/28,16:07:29.906,,,405.2,123.7,,,-2048,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:27.489,2018/02/28,16:07:29.906,,17700,,,46.57626,5.73067,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:27.579,2018/02/28,16:07:30.906,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.489,2018/02/28,16:07:31.906,,34625,,,47.43138,5.07519,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.689,2018/02/28,16:07:33.906,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.998,2018/02/28,16:07:35.902,,34600,,,47.43333,5.07287,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:29.106,2018/02/28,16:07:36.902,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:39.145,2018/02/28,16:07:37.906,,,388.4,321.3,,,-960,,,,,",
                sourceRecording,
                UTF_8);
        final String expectedRecording = "MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:32.987,2018/02/28,16:04:33.236,,,389.8,321.2,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:34.401,2018/02/28,16:04:35.234,,,389.8,321.2,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:34.602,2018/02/28,16:04:36.234,,34650,,,47.42942,5.07751,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.002,2018/02/28,16:04:37.234,,,388.4,321.3,,,-896,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.402,2018/02/28,16:04:37.234,,34650,,,47.42998,5.07688,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.910,2018/02/28,16:04:39.237,,,388.4,321.3,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0";
        final EngineManager engineManager = new EngineManager(
                recording(initialRecording, 1519833870987L),
                newArrayList(replay(timeWindow(2000, 5000),
                        parameters(bstTarget("406E66"), sourceRecording.getPath()))),
                new ActionLogger());
        final String resultRecording = Files.toString(engineManager.run(), UTF_8);
        final Pattern pattern = Pattern.compile("^MSG,0,30,2303,406E66,3838.*$");
        List<String> allReplayedMsg =
                stream(resultRecording.split("\\r?\\n")).filter(s -> pattern.matcher(s).matches()).collect(Collectors.toList());

        // Le bon nombre de messages de la bonne target ont été extraits du recording source
        assertEquals(6, allReplayedMsg.size());

        // La date du premier message rejoué a bien été readaptée
        String[] firstResultMsg = allReplayedMsg.get(0).split(",");
        assertEquals(strDateToTimestamp("2018/02/28,16:04:30.987") + 2000, strDateToTimestamp(firstResultMsg[6] + "," + firstResultMsg[7]));

        //Comparaison sale (pour non-regression on va dire)
        assertEquals(expectedRecording.trim(), resultRecording.trim());
    }

    @Test
    public void applyAction_replay_BST_coordinateOffset() throws Exception {
        final File initialRecording = createTempFile("initial", ".bst");
        final File sourceRecording = createTempFile("source", ".bst");
        write("MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                        "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0",
                initialRecording,
                UTF_8);
        write("MSG,0,30,2303,406E66,3838,2018/02/28,16:07:24.656,2018/02/28,16:07:24.905,,,389.8,321.2,,,-896,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:25.070,2018/02/28,16:07:25.903,,,402.2,121.5,,,-1984,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:25.467,2018/02/28,16:07:26.903,,17725,,,46.57736,5.72837,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.070,2018/02/28,16:07:26.903,,,389.8,321.2,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.271,2018/02/28,16:07:27.903,,34650,,,47.42942,5.07751,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:26.671,2018/02/28,16:07:28.903,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:27.071,2018/02/28,16:07:28.903,,34650,,,47.42998,5.07688,,,0,0,0,0\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:27.076,2018/02/28,16:07:29.906,,,405.2,123.7,,,-2048,,,,,\n" +
                        "MSG,0,30,2304,440062,3841,2018/02/28,16:07:27.489,2018/02/28,16:07:29.906,,17700,,,46.57626,5.73067,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:27.579,2018/02/28,16:07:30.906,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.489,2018/02/28,16:07:31.906,,34625,,,47.43138,5.07519,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.689,2018/02/28,16:07:33.906,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:28.998,2018/02/28,16:07:35.902,,34600,,,47.43333,5.07287,,,0,0,0,0\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:29.106,2018/02/28,16:07:36.902,,,388.4,321.3,,,-896,,,,,\n" +
                        "MSG,0,30,2303,406E66,3838,2018/02/28,16:07:39.145,2018/02/28,16:07:37.906,,,388.4,321.3,,,-960,,,,,",
                sourceRecording,
                UTF_8);
        final String expectedRecording = "MSG,0,30,1105,300065,3839,2018/02/28,16:04:30.987,2018/02/28,16:04:31.888,,,414.1,333,,,64,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:31.987,2018/02/28,16:04:32.888,,36025,,,47.33528,4.16787,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.391,2018/02/28,16:04:33.888,,36025,,,47.33606,4.16732,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:32.590,2018/02/28,16:04:34.888,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:32.987,2018/02/28,16:04:33.236,,,389.8,321.2,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.801,2018/02/28,16:04:35.888,,36025,,,47.33678,4.16678,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:33.998,2018/02/28,16:04:36.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:34.401,2018/02/28,16:04:35.234,,,389.8,321.2,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.404,2018/02/28,16:04:37.894,,36025,,,47.33752,4.16622,,,0,0,0,0\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:34.602,2018/02/28,16:04:36.234,,34650,,,48.02942,4.07751,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:34.607,2018/02/28,16:04:38.894,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.002,2018/02/28,16:04:37.234,,,388.4,321.3,,,-896,,,,,\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.402,2018/02/28,16:04:37.234,,34650,,,48.02998,4.07688,,,0,0,0,0\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:35.608,2018/02/28,16:04:39.894,,36025,,,47.33821,4.16567,,,0,0,0,0\n" +
                "MSG,0,30,2303,406E66,3838,2018/02/28,16:04:35.910,2018/02/28,16:04:39.237,,,388.4,321.3,,,-896,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.017,2018/02/28,16:04:40.889,,,415,333.1,,,0,,,,,\n" +
                "MSG,0,30,1105,300065,3839,2018/02/28,16:04:36.217,2018/02/28,16:04:41.889,,36025,,,47.33926,4.16492,,,0,0,0,0";
        final EngineManager engineManager = new EngineManager(recording(initialRecording, 1519833870987L),
                newArrayList(replay(timeWindow(2000, 5000),
                        parameters(
                                bstTarget("406E66"),
                                sourceRecording.getPath(),
                                parameter(CHARAC_LATITUDE, "0.6", MODE_OFFSET),
                                parameter(CHARAC_LONGITUDE, "-1", MODE_OFFSET)))),
                new ActionLogger());
        final String resultRecording = Files.toString(engineManager.run(), UTF_8);
        Pattern p = Pattern.compile("^MSG,0,30,2303,406E66,3838.*$");
        List<String> allReplayedMsg =
                stream(resultRecording.split("\\r?\\n")).filter(s -> p.matcher(s).matches()).collect(Collectors.toList());

        // Le bon nombre de messages de la bonne target ont été extraits du recording source
        assertEquals(6, allReplayedMsg.size());

        // La date du premier message rejoué a bien été readaptée
        String[] firstResultMsg = allReplayedMsg.get(0).split(",");
        assertEquals(strDateToTimestamp("2018/02/28,16:04:30.987") + 2000, strDateToTimestamp(firstResultMsg[6] + "," + firstResultMsg[7]));

        //Comparaison sale (pour non-regression on va dire)
        assertEquals(expectedRecording.trim(), resultRecording.trim());
    }
}
