import {
  createDefaultModule,
  createDefaultSharedModule,
  DefaultSharedModuleContext,
  inject,
  LangiumServices,
  LangiumSharedServices,
  Module,
  PartialLangiumServices,
} from 'langium'
import {
  AttackScenarioGrammarGeneratedModule,
  AlterationscenarioGeneratedSharedModule,
} from './generated/module'
import {
  AlterationscenarioValidator,
  registerValidationChecks,
} from './alterationscenario-validator'
import { AlterationscenarioCompletionProvider } from './alterationscenario-completion-provider'

/**
 * Declaration of custom services - add your own service classes here.
 */
export type AlterationscenarioAddedServices = {
  validation: {
    AlterationscenarioValidator: AlterationscenarioValidator
  }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type AlterationscenarioServices = LangiumServices &
  AlterationscenarioAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const AlterationscenarioModule: Module<
  AlterationscenarioServices,
  PartialLangiumServices & AlterationscenarioAddedServices
> = {
  lsp: {
    CompletionProvider: (services: LangiumServices) =>
      new AlterationscenarioCompletionProvider(services),
  },
  validation: {
    AlterationscenarioValidator: () => new AlterationscenarioValidator(),
  },
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createAlterationscenarioServices(
  context: DefaultSharedModuleContext
): {
  shared: LangiumSharedServices
  Alterationscenario: AlterationscenarioServices
} {
  const shared = inject(
    createDefaultSharedModule(context),
    AlterationscenarioGeneratedSharedModule
  )
  const Alterationscenario = inject(
    createDefaultModule({ shared }),
    AttackScenarioGrammarGeneratedModule,
    AlterationscenarioModule
  )
  // shared.lsp.ExecuteCommandHandler = new AlterationscenarioCommandHandler();
  shared.ServiceRegistry.register(Alterationscenario)
  registerValidationChecks(Alterationscenario)
  return { shared, Alterationscenario }
}

/**class AlterationscenarioCommandHandler extends AbstractExecuteCommandHandler {
    registerCommands(acceptor: ExecuteCommandAcceptor): void {
        // accept a single command called 'parseAndGenerate'
        acceptor('parseAndGenerate', args => {
            // invoke generator on this data, and return the response
            return parseAndGenerate(args[0],args[1],args[2]);
        });
    }
}**/
