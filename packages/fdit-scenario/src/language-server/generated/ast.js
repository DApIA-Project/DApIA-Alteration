"use strict";
/******************************************************************************
 * This file was generated by langium-cli 1.0.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.isASTCut = exports.ASTCut = exports.isASTCreationParameterType = exports.ASTCreationParameterType = exports.isASTCreationParameters = exports.ASTCreationParameters = exports.isASTCreationParameter = exports.ASTCreationParameter = exports.isASTCreate = exports.ASTCreate = exports.isASTConstantValue = exports.ASTConstantValue = exports.isASTAtFor = exports.ASTAtFor = exports.isASTAt = exports.ASTAt = exports.isASTAssertions = exports.ASTAssertions = exports.isASTAssertion = exports.ASTAssertion = exports.isASTAlterSpeed = exports.ASTAlterSpeed = exports.isASTAlter = exports.ASTAlter = exports.isASTAllPlanes = exports.ASTAllPlanes = exports.isASTAllPlaneFrom = exports.ASTAllPlaneFrom = exports.isASTValue = exports.ASTValue = exports.isASTTimeScope = exports.ASTTimeScope = exports.isASTTarget = exports.ASTTarget = exports.isASTReplayTarget = exports.ASTReplayTarget = exports.isASTRange = exports.ASTRange = exports.isASTParameter = exports.ASTParameter = exports.isASTNumberOffset = exports.ASTNumberOffset = exports.isASTNumber = exports.ASTNumber = exports.isASTList = exports.ASTList = exports.isASTInstruction = exports.ASTInstruction = exports.isASTDeclaration = exports.ASTDeclaration = void 0;
exports.isASTRightShift = exports.ASTRightShift = exports.isASTReplay = exports.ASTReplay = exports.isASTRecordingValue = exports.ASTRecordingValue = exports.isASTRecordingParameterType = exports.ASTRecordingParameterType = exports.isASTRangeDeclaration = exports.ASTRangeDeclaration = exports.isASTPlaneFrom = exports.ASTPlaneFrom = exports.isASTPlane = exports.ASTPlane = exports.isASTParamOffset = exports.ASTParamOffset = exports.isASTParamNoise = exports.ASTParamNoise = exports.isASTParameterType = exports.ASTParameterType = exports.isASTParameters = exports.ASTParameters = exports.isASTParamEdit = exports.ASTParamEdit = exports.isASTParamDrift = exports.ASTParamDrift = exports.isASTOffsetList = exports.ASTOffsetList = exports.isASTListDeclaration = exports.ASTListDeclaration = exports.isASTLeftShift = exports.ASTLeftShift = exports.isASTIntegerValue = exports.ASTIntegerValue = exports.isASTIntegerRange = exports.ASTIntegerRange = exports.isASTHideParameter = exports.ASTHideParameter = exports.isASTHide = exports.ASTHide = exports.isASTFilters = exports.ASTFilters = exports.isASTDoubleValue = exports.ASTDoubleValue = exports.isASTDoubleRange = exports.ASTDoubleRange = exports.isASTDelayParameter = exports.ASTDelayParameter = exports.isASTDelay = exports.ASTDelay = void 0;
exports.reflection = exports.FditscenarioAstReflection = exports.isASTWindow = exports.ASTWindow = exports.isASTWayPoints = exports.ASTWayPoints = exports.isASTWayPoint = exports.ASTWayPoint = exports.isASTVariableValue = exports.ASTVariableValue = exports.isASTTrigger = exports.ASTTrigger = exports.isASTTrajectory = exports.ASTTrajectory = exports.isASTTime = exports.ASTTime = exports.isASTStringValue = exports.ASTStringValue = exports.isASTStringList = exports.ASTStringList = exports.isASTSpeedParameterType = exports.ASTSpeedParameterType = exports.isASTSpeedParameters = exports.ASTSpeedParameters = exports.isASTSpeedParameter = exports.ASTSpeedParameter = exports.isASTScenario = exports.ASTScenario = exports.isASTSaturationParameterType = exports.ASTSaturationParameterType = exports.isASTSaturationParameters = exports.ASTSaturationParameters = exports.isASTSaturationParameter = exports.ASTSaturationParameter = exports.isASTSaturate = exports.ASTSaturate = exports.isASTRotateParameter = exports.ASTRotateParameter = exports.isASTRotate = exports.ASTRotate = void 0;
/* eslint-disable */
const langium_1 = require("langium");
exports.ASTDeclaration = 'ASTDeclaration';
function isASTDeclaration(item) {
    return exports.reflection.isInstance(item, exports.ASTDeclaration);
}
exports.isASTDeclaration = isASTDeclaration;
exports.ASTInstruction = 'ASTInstruction';
function isASTInstruction(item) {
    return exports.reflection.isInstance(item, exports.ASTInstruction);
}
exports.isASTInstruction = isASTInstruction;
exports.ASTList = 'ASTList';
function isASTList(item) {
    return exports.reflection.isInstance(item, exports.ASTList);
}
exports.isASTList = isASTList;
exports.ASTNumber = 'ASTNumber';
function isASTNumber(item) {
    return exports.reflection.isInstance(item, exports.ASTNumber);
}
exports.isASTNumber = isASTNumber;
exports.ASTNumberOffset = 'ASTNumberOffset';
function isASTNumberOffset(item) {
    return exports.reflection.isInstance(item, exports.ASTNumberOffset);
}
exports.isASTNumberOffset = isASTNumberOffset;
exports.ASTParameter = 'ASTParameter';
function isASTParameter(item) {
    return exports.reflection.isInstance(item, exports.ASTParameter);
}
exports.isASTParameter = isASTParameter;
exports.ASTRange = 'ASTRange';
function isASTRange(item) {
    return exports.reflection.isInstance(item, exports.ASTRange);
}
exports.isASTRange = isASTRange;
exports.ASTReplayTarget = 'ASTReplayTarget';
function isASTReplayTarget(item) {
    return exports.reflection.isInstance(item, exports.ASTReplayTarget);
}
exports.isASTReplayTarget = isASTReplayTarget;
exports.ASTTarget = 'ASTTarget';
function isASTTarget(item) {
    return exports.reflection.isInstance(item, exports.ASTTarget);
}
exports.isASTTarget = isASTTarget;
exports.ASTTimeScope = 'ASTTimeScope';
function isASTTimeScope(item) {
    return exports.reflection.isInstance(item, exports.ASTTimeScope);
}
exports.isASTTimeScope = isASTTimeScope;
exports.ASTValue = 'ASTValue';
function isASTValue(item) {
    return exports.reflection.isInstance(item, exports.ASTValue);
}
exports.isASTValue = isASTValue;
exports.ASTAllPlaneFrom = 'ASTAllPlaneFrom';
function isASTAllPlaneFrom(item) {
    return exports.reflection.isInstance(item, exports.ASTAllPlaneFrom);
}
exports.isASTAllPlaneFrom = isASTAllPlaneFrom;
exports.ASTAllPlanes = 'ASTAllPlanes';
function isASTAllPlanes(item) {
    return exports.reflection.isInstance(item, exports.ASTAllPlanes);
}
exports.isASTAllPlanes = isASTAllPlanes;
exports.ASTAlter = 'ASTAlter';
function isASTAlter(item) {
    return exports.reflection.isInstance(item, exports.ASTAlter);
}
exports.isASTAlter = isASTAlter;
exports.ASTAlterSpeed = 'ASTAlterSpeed';
function isASTAlterSpeed(item) {
    return exports.reflection.isInstance(item, exports.ASTAlterSpeed);
}
exports.isASTAlterSpeed = isASTAlterSpeed;
exports.ASTAssertion = 'ASTAssertion';
function isASTAssertion(item) {
    return exports.reflection.isInstance(item, exports.ASTAssertion);
}
exports.isASTAssertion = isASTAssertion;
exports.ASTAssertions = 'ASTAssertions';
function isASTAssertions(item) {
    return exports.reflection.isInstance(item, exports.ASTAssertions);
}
exports.isASTAssertions = isASTAssertions;
exports.ASTAt = 'ASTAt';
function isASTAt(item) {
    return exports.reflection.isInstance(item, exports.ASTAt);
}
exports.isASTAt = isASTAt;
exports.ASTAtFor = 'ASTAtFor';
function isASTAtFor(item) {
    return exports.reflection.isInstance(item, exports.ASTAtFor);
}
exports.isASTAtFor = isASTAtFor;
exports.ASTConstantValue = 'ASTConstantValue';
function isASTConstantValue(item) {
    return exports.reflection.isInstance(item, exports.ASTConstantValue);
}
exports.isASTConstantValue = isASTConstantValue;
exports.ASTCreate = 'ASTCreate';
function isASTCreate(item) {
    return exports.reflection.isInstance(item, exports.ASTCreate);
}
exports.isASTCreate = isASTCreate;
exports.ASTCreationParameter = 'ASTCreationParameter';
function isASTCreationParameter(item) {
    return exports.reflection.isInstance(item, exports.ASTCreationParameter);
}
exports.isASTCreationParameter = isASTCreationParameter;
exports.ASTCreationParameters = 'ASTCreationParameters';
function isASTCreationParameters(item) {
    return exports.reflection.isInstance(item, exports.ASTCreationParameters);
}
exports.isASTCreationParameters = isASTCreationParameters;
exports.ASTCreationParameterType = 'ASTCreationParameterType';
function isASTCreationParameterType(item) {
    return exports.reflection.isInstance(item, exports.ASTCreationParameterType);
}
exports.isASTCreationParameterType = isASTCreationParameterType;
exports.ASTCut = 'ASTCut';
function isASTCut(item) {
    return exports.reflection.isInstance(item, exports.ASTCut);
}
exports.isASTCut = isASTCut;
exports.ASTDelay = 'ASTDelay';
function isASTDelay(item) {
    return exports.reflection.isInstance(item, exports.ASTDelay);
}
exports.isASTDelay = isASTDelay;
exports.ASTDelayParameter = 'ASTDelayParameter';
function isASTDelayParameter(item) {
    return exports.reflection.isInstance(item, exports.ASTDelayParameter);
}
exports.isASTDelayParameter = isASTDelayParameter;
exports.ASTDoubleRange = 'ASTDoubleRange';
function isASTDoubleRange(item) {
    return exports.reflection.isInstance(item, exports.ASTDoubleRange);
}
exports.isASTDoubleRange = isASTDoubleRange;
exports.ASTDoubleValue = 'ASTDoubleValue';
function isASTDoubleValue(item) {
    return exports.reflection.isInstance(item, exports.ASTDoubleValue);
}
exports.isASTDoubleValue = isASTDoubleValue;
exports.ASTFilters = 'ASTFilters';
function isASTFilters(item) {
    return exports.reflection.isInstance(item, exports.ASTFilters);
}
exports.isASTFilters = isASTFilters;
exports.ASTHide = 'ASTHide';
function isASTHide(item) {
    return exports.reflection.isInstance(item, exports.ASTHide);
}
exports.isASTHide = isASTHide;
exports.ASTHideParameter = 'ASTHideParameter';
function isASTHideParameter(item) {
    return exports.reflection.isInstance(item, exports.ASTHideParameter);
}
exports.isASTHideParameter = isASTHideParameter;
exports.ASTIntegerRange = 'ASTIntegerRange';
function isASTIntegerRange(item) {
    return exports.reflection.isInstance(item, exports.ASTIntegerRange);
}
exports.isASTIntegerRange = isASTIntegerRange;
exports.ASTIntegerValue = 'ASTIntegerValue';
function isASTIntegerValue(item) {
    return exports.reflection.isInstance(item, exports.ASTIntegerValue);
}
exports.isASTIntegerValue = isASTIntegerValue;
exports.ASTLeftShift = 'ASTLeftShift';
function isASTLeftShift(item) {
    return exports.reflection.isInstance(item, exports.ASTLeftShift);
}
exports.isASTLeftShift = isASTLeftShift;
exports.ASTListDeclaration = 'ASTListDeclaration';
function isASTListDeclaration(item) {
    return exports.reflection.isInstance(item, exports.ASTListDeclaration);
}
exports.isASTListDeclaration = isASTListDeclaration;
exports.ASTOffsetList = 'ASTOffsetList';
function isASTOffsetList(item) {
    return exports.reflection.isInstance(item, exports.ASTOffsetList);
}
exports.isASTOffsetList = isASTOffsetList;
exports.ASTParamDrift = 'ASTParamDrift';
function isASTParamDrift(item) {
    return exports.reflection.isInstance(item, exports.ASTParamDrift);
}
exports.isASTParamDrift = isASTParamDrift;
exports.ASTParamEdit = 'ASTParamEdit';
function isASTParamEdit(item) {
    return exports.reflection.isInstance(item, exports.ASTParamEdit);
}
exports.isASTParamEdit = isASTParamEdit;
exports.ASTParameters = 'ASTParameters';
function isASTParameters(item) {
    return exports.reflection.isInstance(item, exports.ASTParameters);
}
exports.isASTParameters = isASTParameters;
exports.ASTParameterType = 'ASTParameterType';
function isASTParameterType(item) {
    return exports.reflection.isInstance(item, exports.ASTParameterType);
}
exports.isASTParameterType = isASTParameterType;
exports.ASTParamNoise = 'ASTParamNoise';
function isASTParamNoise(item) {
    return exports.reflection.isInstance(item, exports.ASTParamNoise);
}
exports.isASTParamNoise = isASTParamNoise;
exports.ASTParamOffset = 'ASTParamOffset';
function isASTParamOffset(item) {
    return exports.reflection.isInstance(item, exports.ASTParamOffset);
}
exports.isASTParamOffset = isASTParamOffset;
exports.ASTPlane = 'ASTPlane';
function isASTPlane(item) {
    return exports.reflection.isInstance(item, exports.ASTPlane);
}
exports.isASTPlane = isASTPlane;
exports.ASTPlaneFrom = 'ASTPlaneFrom';
function isASTPlaneFrom(item) {
    return exports.reflection.isInstance(item, exports.ASTPlaneFrom);
}
exports.isASTPlaneFrom = isASTPlaneFrom;
exports.ASTRangeDeclaration = 'ASTRangeDeclaration';
function isASTRangeDeclaration(item) {
    return exports.reflection.isInstance(item, exports.ASTRangeDeclaration);
}
exports.isASTRangeDeclaration = isASTRangeDeclaration;
exports.ASTRecordingParameterType = 'ASTRecordingParameterType';
function isASTRecordingParameterType(item) {
    return exports.reflection.isInstance(item, exports.ASTRecordingParameterType);
}
exports.isASTRecordingParameterType = isASTRecordingParameterType;
exports.ASTRecordingValue = 'ASTRecordingValue';
function isASTRecordingValue(item) {
    return exports.reflection.isInstance(item, exports.ASTRecordingValue);
}
exports.isASTRecordingValue = isASTRecordingValue;
exports.ASTReplay = 'ASTReplay';
function isASTReplay(item) {
    return exports.reflection.isInstance(item, exports.ASTReplay);
}
exports.isASTReplay = isASTReplay;
exports.ASTRightShift = 'ASTRightShift';
function isASTRightShift(item) {
    return exports.reflection.isInstance(item, exports.ASTRightShift);
}
exports.isASTRightShift = isASTRightShift;
exports.ASTRotate = 'ASTRotate';
function isASTRotate(item) {
    return exports.reflection.isInstance(item, exports.ASTRotate);
}
exports.isASTRotate = isASTRotate;
exports.ASTRotateParameter = 'ASTRotateParameter';
function isASTRotateParameter(item) {
    return exports.reflection.isInstance(item, exports.ASTRotateParameter);
}
exports.isASTRotateParameter = isASTRotateParameter;
exports.ASTSaturate = 'ASTSaturate';
function isASTSaturate(item) {
    return exports.reflection.isInstance(item, exports.ASTSaturate);
}
exports.isASTSaturate = isASTSaturate;
exports.ASTSaturationParameter = 'ASTSaturationParameter';
function isASTSaturationParameter(item) {
    return exports.reflection.isInstance(item, exports.ASTSaturationParameter);
}
exports.isASTSaturationParameter = isASTSaturationParameter;
exports.ASTSaturationParameters = 'ASTSaturationParameters';
function isASTSaturationParameters(item) {
    return exports.reflection.isInstance(item, exports.ASTSaturationParameters);
}
exports.isASTSaturationParameters = isASTSaturationParameters;
exports.ASTSaturationParameterType = 'ASTSaturationParameterType';
function isASTSaturationParameterType(item) {
    return exports.reflection.isInstance(item, exports.ASTSaturationParameterType);
}
exports.isASTSaturationParameterType = isASTSaturationParameterType;
exports.ASTScenario = 'ASTScenario';
function isASTScenario(item) {
    return exports.reflection.isInstance(item, exports.ASTScenario);
}
exports.isASTScenario = isASTScenario;
exports.ASTSpeedParameter = 'ASTSpeedParameter';
function isASTSpeedParameter(item) {
    return exports.reflection.isInstance(item, exports.ASTSpeedParameter);
}
exports.isASTSpeedParameter = isASTSpeedParameter;
exports.ASTSpeedParameters = 'ASTSpeedParameters';
function isASTSpeedParameters(item) {
    return exports.reflection.isInstance(item, exports.ASTSpeedParameters);
}
exports.isASTSpeedParameters = isASTSpeedParameters;
exports.ASTSpeedParameterType = 'ASTSpeedParameterType';
function isASTSpeedParameterType(item) {
    return exports.reflection.isInstance(item, exports.ASTSpeedParameterType);
}
exports.isASTSpeedParameterType = isASTSpeedParameterType;
exports.ASTStringList = 'ASTStringList';
function isASTStringList(item) {
    return exports.reflection.isInstance(item, exports.ASTStringList);
}
exports.isASTStringList = isASTStringList;
exports.ASTStringValue = 'ASTStringValue';
function isASTStringValue(item) {
    return exports.reflection.isInstance(item, exports.ASTStringValue);
}
exports.isASTStringValue = isASTStringValue;
exports.ASTTime = 'ASTTime';
function isASTTime(item) {
    return exports.reflection.isInstance(item, exports.ASTTime);
}
exports.isASTTime = isASTTime;
exports.ASTTrajectory = 'ASTTrajectory';
function isASTTrajectory(item) {
    return exports.reflection.isInstance(item, exports.ASTTrajectory);
}
exports.isASTTrajectory = isASTTrajectory;
exports.ASTTrigger = 'ASTTrigger';
function isASTTrigger(item) {
    return exports.reflection.isInstance(item, exports.ASTTrigger);
}
exports.isASTTrigger = isASTTrigger;
exports.ASTVariableValue = 'ASTVariableValue';
function isASTVariableValue(item) {
    return exports.reflection.isInstance(item, exports.ASTVariableValue);
}
exports.isASTVariableValue = isASTVariableValue;
exports.ASTWayPoint = 'ASTWayPoint';
function isASTWayPoint(item) {
    return exports.reflection.isInstance(item, exports.ASTWayPoint);
}
exports.isASTWayPoint = isASTWayPoint;
exports.ASTWayPoints = 'ASTWayPoints';
function isASTWayPoints(item) {
    return exports.reflection.isInstance(item, exports.ASTWayPoints);
}
exports.isASTWayPoints = isASTWayPoints;
exports.ASTWindow = 'ASTWindow';
function isASTWindow(item) {
    return exports.reflection.isInstance(item, exports.ASTWindow);
}
exports.isASTWindow = isASTWindow;
class FditscenarioAstReflection extends langium_1.AbstractAstReflection {
    getAllTypes() {
        return ['ASTAllPlaneFrom', 'ASTAllPlanes', 'ASTAlter', 'ASTAlterSpeed', 'ASTAssertion', 'ASTAssertions', 'ASTAt', 'ASTAtFor', 'ASTConstantValue', 'ASTCreate', 'ASTCreationParameter', 'ASTCreationParameterType', 'ASTCreationParameters', 'ASTCut', 'ASTDeclaration', 'ASTDelay', 'ASTDelayParameter', 'ASTDoubleRange', 'ASTDoubleValue', 'ASTFilters', 'ASTHide', 'ASTHideParameter', 'ASTInstruction', 'ASTIntegerRange', 'ASTIntegerValue', 'ASTLeftShift', 'ASTList', 'ASTListDeclaration', 'ASTNumber', 'ASTNumberOffset', 'ASTOffsetList', 'ASTParamDrift', 'ASTParamEdit', 'ASTParamNoise', 'ASTParamOffset', 'ASTParameter', 'ASTParameterType', 'ASTParameters', 'ASTPlane', 'ASTPlaneFrom', 'ASTRange', 'ASTRangeDeclaration', 'ASTRecordingParameterType', 'ASTRecordingValue', 'ASTReplay', 'ASTReplayTarget', 'ASTRightShift', 'ASTRotate', 'ASTRotateParameter', 'ASTSaturate', 'ASTSaturationParameter', 'ASTSaturationParameterType', 'ASTSaturationParameters', 'ASTScenario', 'ASTSpeedParameter', 'ASTSpeedParameterType', 'ASTSpeedParameters', 'ASTStringList', 'ASTStringValue', 'ASTTarget', 'ASTTime', 'ASTTimeScope', 'ASTTrajectory', 'ASTTrigger', 'ASTValue', 'ASTVariableValue', 'ASTWayPoint', 'ASTWayPoints', 'ASTWindow'];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case exports.ASTAllPlaneFrom:
            case exports.ASTPlaneFrom: {
                return this.isSubtype(exports.ASTReplayTarget, supertype);
            }
            case exports.ASTAllPlanes:
            case exports.ASTPlane: {
                return this.isSubtype(exports.ASTTarget, supertype);
            }
            case exports.ASTAlter:
            case exports.ASTAlterSpeed:
            case exports.ASTCreate:
            case exports.ASTCut:
            case exports.ASTDelay:
            case exports.ASTHide:
            case exports.ASTReplay:
            case exports.ASTRotate:
            case exports.ASTSaturate:
            case exports.ASTTrajectory: {
                return this.isSubtype(exports.ASTInstruction, supertype);
            }
            case exports.ASTAt:
            case exports.ASTAtFor:
            case exports.ASTWindow: {
                return this.isSubtype(exports.ASTTimeScope, supertype);
            }
            case exports.ASTConstantValue:
            case exports.ASTStringValue:
            case exports.ASTVariableValue:
            case exports.ASTNumberOffset: {
                return this.isSubtype(exports.ASTValue, supertype);
            }
            case exports.ASTDoubleRange:
            case exports.ASTIntegerRange: {
                return this.isSubtype(exports.ASTRange, supertype);
            }
            case exports.ASTDoubleValue:
            case exports.ASTIntegerValue:
            case exports.ASTRecordingValue: {
                return this.isSubtype(exports.ASTNumber, supertype);
            }
            case exports.ASTLeftShift:
            case exports.ASTRightShift:
            case exports.ASTNumber: {
                return this.isSubtype(exports.ASTNumberOffset, supertype);
            }
            case exports.ASTListDeclaration:
            case exports.ASTRangeDeclaration: {
                return this.isSubtype(exports.ASTDeclaration, supertype);
            }
            case exports.ASTOffsetList:
            case exports.ASTStringList: {
                return this.isSubtype(exports.ASTList, supertype);
            }
            case exports.ASTParamDrift:
            case exports.ASTParamEdit:
            case exports.ASTParamNoise:
            case exports.ASTParamOffset: {
                return this.isSubtype(exports.ASTParameter, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'ASTAssertions': {
                return {
                    name: 'ASTAssertions',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'ASTCreationParameters': {
                return {
                    name: 'ASTCreationParameters',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'ASTFilters': {
                return {
                    name: 'ASTFilters',
                    mandatory: [
                        { name: 'filters', type: 'array' }
                    ]
                };
            }
            case 'ASTOffsetList': {
                return {
                    name: 'ASTOffsetList',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'ASTParameters': {
                return {
                    name: 'ASTParameters',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'ASTSaturationParameters': {
                return {
                    name: 'ASTSaturationParameters',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'ASTScenario': {
                return {
                    name: 'ASTScenario',
                    mandatory: [
                        { name: 'declarations', type: 'array' },
                        { name: 'instructions', type: 'array' }
                    ]
                };
            }
            case 'ASTSpeedParameters': {
                return {
                    name: 'ASTSpeedParameters',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'ASTStringList': {
                return {
                    name: 'ASTStringList',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'ASTWayPoints': {
                return {
                    name: 'ASTWayPoints',
                    mandatory: [
                        { name: 'waypoints', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.FditscenarioAstReflection = FditscenarioAstReflection;
exports.reflection = new FditscenarioAstReflection();
