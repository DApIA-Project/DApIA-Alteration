/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import {
  AstNode,
  AbstractAstReflection,
  ReferenceInfo,
  TypeMetaData,
} from 'langium'

export type ASTInstruction =
  | ASTAlterAndTrajectory
  | ASTCreate
  | ASTCut
  | ASTDelay
  | ASTHide
  | ASTReplay
  | ASTRotate
  | ASTSaturate

export const ASTInstruction = 'ASTInstruction'

export function isASTInstruction(item: unknown): item is ASTInstruction {
  return reflection.isInstance(item, ASTInstruction)
}

export type ASTNumber = ASTDoubleValue | ASTIntegerValue

export const ASTNumber = 'ASTNumber'

export function isASTNumber(item: unknown): item is ASTNumber {
  return reflection.isInstance(item, ASTNumber)
}

export type ASTNumberOffset = ASTLeftShift | ASTNumber | ASTRightShift

export const ASTNumberOffset = 'ASTNumberOffset'

export function isASTNumberOffset(item: unknown): item is ASTNumberOffset {
  return reflection.isInstance(item, ASTNumberOffset)
}

export type ASTTarget = ASTAllPlanes | ASTPlane

export const ASTTarget = 'ASTTarget'

export function isASTTarget(item: unknown): item is ASTTarget {
  return reflection.isInstance(item, ASTTarget)
}

export type ASTTimeScope = ASTAt | ASTWindow

export const ASTTimeScope = 'ASTTimeScope'

export function isASTTimeScope(item: unknown): item is ASTTimeScope {
  return reflection.isInstance(item, ASTTimeScope)
}

export type ASTValue =
  | ASTConstantValue
  | ASTNumberOffset
  | ASTStringValue
  | ASTVariableValue

export const ASTValue = 'ASTValue'

export function isASTValue(item: unknown): item is ASTValue {
  return reflection.isInstance(item, ASTValue)
}

export type T_ALL_PLANES = 'all_planes'

export type T_ALTER = 'alter'

export type T_ALTER_SPEED = 'alter_speed'

export type T_ALTITUDE = 'altitude'

export type T_AND = 'and'

export type T_AREA = 'area'

export type T_ASSERT = 'assert'

export type T_AT = 'at'

export type T_CENTERED = 'centered'

export type T_CIRCLE = 'circle'

export type T_CLOSE_BRACE = '}'

export type T_CLOSE_PAR = ')'

export type T_CLOSE_SBRACE = ']'

export type T_COMMA = ','

export type T_CREATE = 'create'

export type T_CUT = 'cut'

export type T_DELAY = 'delay'

export type T_DIFFERENT = '<>'

export type T_DO = 'do'

export type T_DOT = '.'

export type T_EACH = 'each'

export type T_EQUAL = '='

export type T_FILTER = 'filter'

export type T_FOR = 'for'

export type T_FROM = 'from'

export type T_FROM_RECORDING = 'from_recording'

export type T_GLOBAL = 'global'

export type T_GROOVY_FILE = 'groovy_file'

export type T_GT = '>'

export type T_GTE = '>='

export type T_HIDE = 'hide'

export type T_IN = 'in'

export type T_LEFTSHIT = '<<'

export type T_LET = 'let'

export type T_LT = '<'

export type T_LTE = '<='

export type T_MINUSEQUAL = '-='

export type T_MINUSMINUSEQUAL = '--='

export type T_MUL = '*'

export type T_MULEQUAL = '*='

export type T_OPEN_BRACE = '{'

export type T_OPEN_PAR = '('

export type T_OPEN_SBRACE = '['

export type T_PLANE = 'plane'

export type T_PLANES = 'planes'

export type T_PLUSEQUAL = '+='

export type T_PLUSPLUSEQUAL = '++='

export type T_POLYGON = 'polygon'

export type T_RADIUS = 'radius'

export type T_REPLAY = 'replay'

export type T_RIGHTSHIT = '>>'

export type T_ROTATE = 'rotate'

export type T_SATISFYING = 'satisfying'

export type T_SATURATE = 'saturate'

export type T_SECONDS = 'seconds'

export type T_TO = 'to'

export type T_TRIGGERED_BY = 'triggered_by'

export type T_UNTIL = 'until'

export type T_VERTICES = 'vertices'

export type T_WITH = 'with'

export type T_WITH_ALTITUDE = 'with_altitude'

export type T_WITH_ANGLE = 'with_angle'

export type T_WITH_DELAY = 'with_delay'

export type T_WITH_FREQUENCY = 'with_frequency'

export type T_WITH_VALUES = 'with_values'

export type T_WITH_WAYPOINTS = 'with_waypoints'

export interface ASTAllPlanes extends AstNode {
  readonly $container:
    | ASTAlterAndTrajectory
    | ASTCut
    | ASTDelay
    | ASTHide
    | ASTReplay
    | ASTRotate
    | ASTSaturate
  readonly $type: 'ASTAllPlanes'
  filters?: ASTFilters
  keyword: T_ALL_PLANES
}

export const ASTAllPlanes = 'ASTAllPlanes'

export function isASTAllPlanes(item: unknown): item is ASTAllPlanes {
  return reflection.isInstance(item, ASTAllPlanes)
}

export interface ASTAlter extends AstNode {
  readonly $container: ASTAlterAndTrajectory
  readonly $type: 'ASTAlter'
  parameters: ASTParameters
}

export const ASTAlter = 'ASTAlter'

export function isASTAlter(item: unknown): item is ASTAlter {
  return reflection.isInstance(item, ASTAlter)
}

export interface ASTAlterAndTrajectory extends AstNode {
  readonly $container: ASTScenario
  readonly $type: 'ASTAlterAndTrajectory'
  keyword: T_ALTER
  mode: ASTAlter | ASTTrajectory
  target: ASTTarget
  timeScope: ASTTimeScope
  trigger?: ASTTrigger
}

export const ASTAlterAndTrajectory = 'ASTAlterAndTrajectory'

export function isASTAlterAndTrajectory(
  item: unknown
): item is ASTAlterAndTrajectory {
  return reflection.isInstance(item, ASTAlterAndTrajectory)
}

export interface ASTAt extends AstNode {
  readonly $container:
    | ASTAlterAndTrajectory
    | ASTCreate
    | ASTCut
    | ASTDelay
    | ASTHide
    | ASTReplay
    | ASTRotate
    | ASTSaturate
  readonly $type: 'ASTAt'
  for?: ASTAtFor
  keyword: T_AT
  time: ASTTime
}

export const ASTAt = 'ASTAt'

export function isASTAt(item: unknown): item is ASTAt {
  return reflection.isInstance(item, ASTAt)
}

export interface ASTAtFor extends AstNode {
  readonly $container: ASTAt
  readonly $type: 'ASTAtFor'
  for: ASTTime
  keyword: T_FOR
}

export const ASTAtFor = 'ASTAtFor'

export function isASTAtFor(item: unknown): item is ASTAtFor {
  return reflection.isInstance(item, ASTAtFor)
}

export interface ASTConstantValue extends AstNode {
  readonly $container:
    | ASTCreationParameter
    | ASTFilters
    | ASTHideParameter
    | ASTLeftShift
    | ASTOffsetList
    | ASTParameter
    | ASTRightShift
    | ASTRotateParameter
    | ASTSaturationParameter
    | ASTTime
    | ASTTrigger
    | ASTWayPoint
  readonly $type: 'ASTConstantValue'
  content: string
}

export const ASTConstantValue = 'ASTConstantValue'

export function isASTConstantValue(item: unknown): item is ASTConstantValue {
  return reflection.isInstance(item, ASTConstantValue)
}

export interface ASTCreate extends AstNode {
  readonly $container: ASTScenario
  readonly $type: 'ASTCreate'
  keyword: T_CREATE
  parameters?: ASTCreationParameters
  timeScope: ASTTimeScope
  trajectory: ASTWayPoints
}

export const ASTCreate = 'ASTCreate'

export function isASTCreate(item: unknown): item is ASTCreate {
  return reflection.isInstance(item, ASTCreate)
}

export interface ASTCreationParameter extends AstNode {
  readonly $container: ASTCreationParameters
  readonly $type: 'ASTCreationParameter'
  keyword: T_EQUAL
  name: ASTCreationParameterType
  value: ASTValue
}

export const ASTCreationParameter = 'ASTCreationParameter'

export function isASTCreationParameter(
  item: unknown
): item is ASTCreationParameter {
  return reflection.isInstance(item, ASTCreationParameter)
}

export interface ASTCreationParameters extends AstNode {
  readonly $container: ASTCreate
  readonly $type: 'ASTCreationParameters'
  items: Array<ASTCreationParameter>
  keyword: T_AND | T_WITH_VALUES
}

export const ASTCreationParameters = 'ASTCreationParameters'

export function isASTCreationParameters(
  item: unknown
): item is ASTCreationParameters {
  return reflection.isInstance(item, ASTCreationParameters)
}

export interface ASTCreationParameterType extends AstNode {
  readonly $container: ASTCreationParameter
  readonly $type: 'ASTCreationParameterType'
  ALERT?: 'ALERT'
  CALLSIGN?: 'CALLSIGN'
  EMERGENCY?: 'EMERGENCY'
  ICAO?: 'ICAO'
  SPI?: 'SPI'
  SQUAWK?: 'SQUAWK'
}

export const ASTCreationParameterType = 'ASTCreationParameterType'

export function isASTCreationParameterType(
  item: unknown
): item is ASTCreationParameterType {
  return reflection.isInstance(item, ASTCreationParameterType)
}

export interface ASTCut extends AstNode {
  readonly $container: ASTScenario
  readonly $type: 'ASTCut'
  keyword: T_CUT
  target: ASTTarget
  timeScope: ASTTimeScope
  trigger?: ASTTrigger
}

export const ASTCut = 'ASTCut'

export function isASTCut(item: unknown): item is ASTCut {
  return reflection.isInstance(item, ASTCut)
}

export interface ASTDeclaration extends AstNode {
  readonly $container: ASTScenario
  readonly $type:
    | 'ASTDeclaration'
    | 'ASTListDeclaration'
    | 'ASTRangeDeclaration'
  constant: string
  keyword: T_COMMA | T_EQUAL | T_LET
}

export const ASTDeclaration = 'ASTDeclaration'

export function isASTDeclaration(item: unknown): item is ASTDeclaration {
  return reflection.isInstance(item, ASTDeclaration)
}

export interface ASTDelay extends AstNode {
  readonly $container: ASTScenario
  readonly $type: 'ASTDelay'
  delay: ASTDelayParameter
  keyword: T_DELAY
  target: ASTTarget
  timeScope: ASTTimeScope
}

export const ASTDelay = 'ASTDelay'

export function isASTDelay(item: unknown): item is ASTDelay {
  return reflection.isInstance(item, ASTDelay)
}

export interface ASTDelayParameter extends AstNode {
  readonly $container: ASTDelay
  readonly $type: 'ASTDelayParameter'
  keyword: T_WITH_DELAY
  value: ASTTime
}

export const ASTDelayParameter = 'ASTDelayParameter'

export function isASTDelayParameter(item: unknown): item is ASTDelayParameter {
  return reflection.isInstance(item, ASTDelayParameter)
}

export interface ASTDoubleRange extends AstNode {
  readonly $container: ASTRange
  readonly $type: 'ASTDoubleRange'
  end: number
  keyword: T_CLOSE_SBRACE | T_COMMA
  start: number
}

export const ASTDoubleRange = 'ASTDoubleRange'

export function isASTDoubleRange(item: unknown): item is ASTDoubleRange {
  return reflection.isInstance(item, ASTDoubleRange)
}

export interface ASTDoubleValue extends AstNode {
  readonly $container:
    | ASTCreationParameter
    | ASTFilters
    | ASTHideParameter
    | ASTLeftShift
    | ASTOffsetList
    | ASTParameter
    | ASTRightShift
    | ASTRotateParameter
    | ASTSaturationParameter
    | ASTTime
    | ASTTrigger
    | ASTWayPoint
  readonly $type: 'ASTDoubleValue'
  content: number
  record?: ASTRecordingValue
}

export const ASTDoubleValue = 'ASTDoubleValue'

export function isASTDoubleValue(item: unknown): item is ASTDoubleValue {
  return reflection.isInstance(item, ASTDoubleValue)
}

export interface ASTFilters extends AstNode {
  readonly $container: ASTAllPlanes | ASTPlane
  readonly $type: 'ASTFilters'
  filters: Array<ASTValue>
  keyword: T_AND | T_SATISFYING
}

export const ASTFilters = 'ASTFilters'

export function isASTFilters(item: unknown): item is ASTFilters {
  return reflection.isInstance(item, ASTFilters)
}

export interface ASTHide extends AstNode {
  readonly $container: ASTScenario
  readonly $type: 'ASTHide'
  frequency?: ASTHideParameter
  keyword: T_HIDE
  target: ASTTarget
  timeScope: ASTTimeScope
  trigger?: ASTTrigger
}

export const ASTHide = 'ASTHide'

export function isASTHide(item: unknown): item is ASTHide {
  return reflection.isInstance(item, ASTHide)
}

export interface ASTHideParameter extends AstNode {
  readonly $container: ASTHide
  readonly $type: 'ASTHideParameter'
  keyword: T_WITH_FREQUENCY
  value: ASTValue
}

export const ASTHideParameter = 'ASTHideParameter'

export function isASTHideParameter(item: unknown): item is ASTHideParameter {
  return reflection.isInstance(item, ASTHideParameter)
}

export interface ASTIntegerRange extends AstNode {
  readonly $container: ASTRange
  readonly $type: 'ASTIntegerRange'
  end: number
  keyword: T_CLOSE_SBRACE | T_COMMA
  start: number
}

export const ASTIntegerRange = 'ASTIntegerRange'

export function isASTIntegerRange(item: unknown): item is ASTIntegerRange {
  return reflection.isInstance(item, ASTIntegerRange)
}

export interface ASTIntegerValue extends AstNode {
  readonly $container:
    | ASTCreationParameter
    | ASTFilters
    | ASTHideParameter
    | ASTLeftShift
    | ASTOffsetList
    | ASTParameter
    | ASTRightShift
    | ASTRotateParameter
    | ASTSaturationParameter
    | ASTTime
    | ASTTrigger
    | ASTWayPoint
  readonly $type: 'ASTIntegerValue'
  content: number
}

export const ASTIntegerValue = 'ASTIntegerValue'

export function isASTIntegerValue(item: unknown): item is ASTIntegerValue {
  return reflection.isInstance(item, ASTIntegerValue)
}

export interface ASTLeftShift extends AstNode {
  readonly $container:
    | ASTCreationParameter
    | ASTFilters
    | ASTHideParameter
    | ASTLeftShift
    | ASTOffsetList
    | ASTParameter
    | ASTRightShift
    | ASTRotateParameter
    | ASTSaturationParameter
    | ASTTime
    | ASTTrigger
    | ASTWayPoint
  readonly $type: 'ASTLeftShift'
  content: ASTNumber
  keyword: T_LEFTSHIT
}

export const ASTLeftShift = 'ASTLeftShift'

export function isASTLeftShift(item: unknown): item is ASTLeftShift {
  return reflection.isInstance(item, ASTLeftShift)
}

export interface ASTList extends AstNode {
  readonly $container: ASTListDeclaration
  readonly $type: 'ASTList'
  keyword: T_OPEN_BRACE
  list: ASTOffsetList | ASTStringList
}

export const ASTList = 'ASTList'

export function isASTList(item: unknown): item is ASTList {
  return reflection.isInstance(item, ASTList)
}

export interface ASTOffsetList extends AstNode {
  readonly $container: ASTList
  readonly $type: 'ASTOffsetList'
  items: Array<ASTNumberOffset>
  keyword: T_CLOSE_BRACE | T_COMMA
}

export const ASTOffsetList = 'ASTOffsetList'

export function isASTOffsetList(item: unknown): item is ASTOffsetList {
  return reflection.isInstance(item, ASTOffsetList)
}

export interface ASTParameter extends AstNode {
  readonly $container: ASTParameters
  readonly $type:
    | 'ASTParamDrift'
    | 'ASTParamEdit'
    | 'ASTParamNoise'
    | 'ASTParamOffset'
    | 'ASTParameter'
  name: ASTParameterType
  value: ASTValue
}

export const ASTParameter = 'ASTParameter'

export function isASTParameter(item: unknown): item is ASTParameter {
  return reflection.isInstance(item, ASTParameter)
}

export interface ASTParameters extends AstNode {
  readonly $container: ASTAlter | ASTReplay
  readonly $type: 'ASTParameters'
  items: Array<ASTParameter>
  keyword: T_AND | T_WITH_VALUES
}

export const ASTParameters = 'ASTParameters'

export function isASTParameters(item: unknown): item is ASTParameters {
  return reflection.isInstance(item, ASTParameters)
}

export interface ASTParameterType extends AstNode {
  readonly $container: ASTParameter
  readonly $type: 'ASTParameterType'
  ALTITUDE?: 'ALTITUDE'
  CALLSIGN?: 'CALLSIGN'
  EMERGENCY?: 'EMERGENCY'
  GROUND_SPEED?: 'GROUNDSPEED'
  ICAO?: 'ICAO'
  LATITUDE?: 'LATITUDE'
  LONGITUDE?: 'LONGITUDE'
  SPI?: 'SPI'
  SQUAWK?: 'SQUAWK'
  TRACK?: 'TRACK'
}

export const ASTParameterType = 'ASTParameterType'

export function isASTParameterType(item: unknown): item is ASTParameterType {
  return reflection.isInstance(item, ASTParameterType)
}

export interface ASTPlane extends AstNode {
  readonly $container:
    | ASTAlterAndTrajectory
    | ASTCut
    | ASTDelay
    | ASTHide
    | ASTReplay
    | ASTRotate
    | ASTSaturate
  readonly $type: 'ASTPlane'
  filters: ASTFilters
  keyword: T_PLANE
}

export const ASTPlane = 'ASTPlane'

export function isASTPlane(item: unknown): item is ASTPlane {
  return reflection.isInstance(item, ASTPlane)
}

export interface ASTRange extends AstNode {
  readonly $container: ASTRangeDeclaration
  readonly $type: 'ASTRange'
  keyword: T_OPEN_SBRACE
  range: ASTDoubleRange | ASTIntegerRange
}

export const ASTRange = 'ASTRange'

export function isASTRange(item: unknown): item is ASTRange {
  return reflection.isInstance(item, ASTRange)
}

export interface ASTRecordingParameterType extends AstNode {
  readonly $container: ASTRecordingValue
  readonly $type: 'ASTRecordingParameterType'
  ALT_DURATION?: 'ALT_DURATION'
  REC_DURATION?: 'REC_DURATION'
  REC_NBR_AIRCRAFT?: 'REC_NBR_AIRCRAFT'
}

export const ASTRecordingParameterType = 'ASTRecordingParameterType'

export function isASTRecordingParameterType(
  item: unknown
): item is ASTRecordingParameterType {
  return reflection.isInstance(item, ASTRecordingParameterType)
}

export interface ASTRecordingValue extends AstNode {
  readonly $container: ASTDoubleValue
  readonly $type: 'ASTRecordingValue'
  content: ASTRecordingParameterType
  keyword: T_MUL
}

export const ASTRecordingValue = 'ASTRecordingValue'

export function isASTRecordingValue(item: unknown): item is ASTRecordingValue {
  return reflection.isInstance(item, ASTRecordingValue)
}

export interface ASTReplay extends AstNode {
  readonly $container: ASTScenario
  readonly $type: 'ASTReplay'
  keyword: T_REPLAY
  parameters?: ASTParameters
  target: ASTTarget
  timeScope: ASTTimeScope
}

export const ASTReplay = 'ASTReplay'

export function isASTReplay(item: unknown): item is ASTReplay {
  return reflection.isInstance(item, ASTReplay)
}

export interface ASTRightShift extends AstNode {
  readonly $container:
    | ASTCreationParameter
    | ASTFilters
    | ASTHideParameter
    | ASTLeftShift
    | ASTOffsetList
    | ASTParameter
    | ASTRightShift
    | ASTRotateParameter
    | ASTSaturationParameter
    | ASTTime
    | ASTTrigger
    | ASTWayPoint
  readonly $type: 'ASTRightShift'
  content: ASTNumber
  keyword: T_RIGHTSHIT
}

export const ASTRightShift = 'ASTRightShift'

export function isASTRightShift(item: unknown): item is ASTRightShift {
  return reflection.isInstance(item, ASTRightShift)
}

export interface ASTRotate extends AstNode {
  readonly $container: ASTScenario
  readonly $type: 'ASTRotate'
  angle: ASTRotateParameter
  keyword: T_ROTATE
  target: ASTTarget
  timeScope: ASTTimeScope
  trigger?: ASTTrigger
}

export const ASTRotate = 'ASTRotate'

export function isASTRotate(item: unknown): item is ASTRotate {
  return reflection.isInstance(item, ASTRotate)
}

export interface ASTRotateParameter extends AstNode {
  readonly $container: ASTRotate
  readonly $type: 'ASTRotateParameter'
  keyword: T_WITH_ANGLE
  value: ASTValue
}

export const ASTRotateParameter = 'ASTRotateParameter'

export function isASTRotateParameter(
  item: unknown
): item is ASTRotateParameter {
  return reflection.isInstance(item, ASTRotateParameter)
}

export interface ASTSaturate extends AstNode {
  readonly $container: ASTScenario
  readonly $type: 'ASTSaturate'
  keyword: T_SATURATE
  parameters: ASTSaturationParameters
  target: ASTTarget
  timeScope: ASTTimeScope
  trigger?: ASTTrigger
}

export const ASTSaturate = 'ASTSaturate'

export function isASTSaturate(item: unknown): item is ASTSaturate {
  return reflection.isInstance(item, ASTSaturate)
}

export interface ASTSaturationParameter extends AstNode {
  readonly $container: ASTSaturationParameters
  readonly $type: 'ASTSaturationParameter'
  keyword: T_EQUAL
  name: ASTSaturationParameterType
  value: ASTValue
}

export const ASTSaturationParameter = 'ASTSaturationParameter'

export function isASTSaturationParameter(
  item: unknown
): item is ASTSaturationParameter {
  return reflection.isInstance(item, ASTSaturationParameter)
}

export interface ASTSaturationParameters extends AstNode {
  readonly $container: ASTSaturate
  readonly $type: 'ASTSaturationParameters'
  items: Array<ASTSaturationParameter>
  keyword: T_AND | T_WITH_VALUES
}

export const ASTSaturationParameters = 'ASTSaturationParameters'

export function isASTSaturationParameters(
  item: unknown
): item is ASTSaturationParameters {
  return reflection.isInstance(item, ASTSaturationParameters)
}

export interface ASTSaturationParameterType extends AstNode {
  readonly $container: ASTSaturationParameter
  readonly $type: 'ASTSaturationParameterType'
  AIRCRAFT_NUMBER?: 'NUMBER'
  ICAO?: 'ICAO'
}

export const ASTSaturationParameterType = 'ASTSaturationParameterType'

export function isASTSaturationParameterType(
  item: unknown
): item is ASTSaturationParameterType {
  return reflection.isInstance(item, ASTSaturationParameterType)
}

export interface ASTScenario extends AstNode {
  readonly $type: 'ASTScenario'
  declarations: Array<ASTDeclaration>
  instructions: Array<ASTInstruction>
}

export const ASTScenario = 'ASTScenario'

export function isASTScenario(item: unknown): item is ASTScenario {
  return reflection.isInstance(item, ASTScenario)
}

export interface ASTStringList extends AstNode {
  readonly $container: ASTList
  readonly $type: 'ASTStringList'
  items: Array<string>
  keyword: T_CLOSE_BRACE | T_COMMA
}

export const ASTStringList = 'ASTStringList'

export function isASTStringList(item: unknown): item is ASTStringList {
  return reflection.isInstance(item, ASTStringList)
}

export interface ASTStringValue extends AstNode {
  readonly $container:
    | ASTCreationParameter
    | ASTFilters
    | ASTHideParameter
    | ASTLeftShift
    | ASTOffsetList
    | ASTParameter
    | ASTRightShift
    | ASTRotateParameter
    | ASTSaturationParameter
    | ASTTime
    | ASTTrigger
    | ASTWayPoint
  readonly $type: 'ASTStringValue'
  content: string
}

export const ASTStringValue = 'ASTStringValue'

export function isASTStringValue(item: unknown): item is ASTStringValue {
  return reflection.isInstance(item, ASTStringValue)
}

export interface ASTTime extends AstNode {
  readonly $container:
    | ASTAt
    | ASTAtFor
    | ASTDelayParameter
    | ASTWayPoint
    | ASTWindow
  readonly $type: 'ASTTime'
  keyword: T_SECONDS
  realTime: ASTValue
}

export const ASTTime = 'ASTTime'

export function isASTTime(item: unknown): item is ASTTime {
  return reflection.isInstance(item, ASTTime)
}

export interface ASTTrajectory extends AstNode {
  readonly $container: ASTAlterAndTrajectory
  readonly $type: 'ASTTrajectory'
  trajectory: ASTWayPoints
}

export const ASTTrajectory = 'ASTTrajectory'

export function isASTTrajectory(item: unknown): item is ASTTrajectory {
  return reflection.isInstance(item, ASTTrajectory)
}

export interface ASTTrigger extends AstNode {
  readonly $container:
    | ASTAlterAndTrajectory
    | ASTCut
    | ASTHide
    | ASTRotate
    | ASTSaturate
  readonly $type: 'ASTTrigger'
  keyword: T_TRIGGERED_BY
  triggername: ASTValue
}

export const ASTTrigger = 'ASTTrigger'

export function isASTTrigger(item: unknown): item is ASTTrigger {
  return reflection.isInstance(item, ASTTrigger)
}

export interface ASTVariableValue extends AstNode {
  readonly $container:
    | ASTCreationParameter
    | ASTFilters
    | ASTHideParameter
    | ASTLeftShift
    | ASTOffsetList
    | ASTParameter
    | ASTRightShift
    | ASTRotateParameter
    | ASTSaturationParameter
    | ASTTime
    | ASTTrigger
    | ASTWayPoint
  readonly $type: 'ASTVariableValue'
  content: string
}

export const ASTVariableValue = 'ASTVariableValue'

export function isASTVariableValue(item: unknown): item is ASTVariableValue {
  return reflection.isInstance(item, ASTVariableValue)
}

export interface ASTWayPoint extends AstNode {
  readonly $container: ASTWayPoints
  readonly $type: 'ASTWayPoint'
  altitude: ASTValue
  keyword: T_AT | T_CLOSE_PAR | T_COMMA | T_OPEN_PAR | T_WITH_ALTITUDE
  latitude: ASTValue
  longitude: ASTValue
  time: ASTTime
}

export const ASTWayPoint = 'ASTWayPoint'

export function isASTWayPoint(item: unknown): item is ASTWayPoint {
  return reflection.isInstance(item, ASTWayPoint)
}

export interface ASTWayPoints extends AstNode {
  readonly $container: ASTCreate | ASTTrajectory
  readonly $type: 'ASTWayPoints'
  keyword: T_CLOSE_SBRACE | T_COMMA | T_OPEN_SBRACE | T_WITH_WAYPOINTS
  waypoints: Array<ASTWayPoint>
}

export const ASTWayPoints = 'ASTWayPoints'

export function isASTWayPoints(item: unknown): item is ASTWayPoints {
  return reflection.isInstance(item, ASTWayPoints)
}

export interface ASTWindow extends AstNode {
  readonly $container:
    | ASTAlterAndTrajectory
    | ASTCreate
    | ASTCut
    | ASTDelay
    | ASTHide
    | ASTReplay
    | ASTRotate
    | ASTSaturate
  readonly $type: 'ASTWindow'
  end: ASTTime
  keyword: T_FROM | T_UNTIL
  start: ASTTime
}

export const ASTWindow = 'ASTWindow'

export function isASTWindow(item: unknown): item is ASTWindow {
  return reflection.isInstance(item, ASTWindow)
}

export interface ASTListDeclaration extends ASTDeclaration {
  readonly $container: ASTScenario
  readonly $type: 'ASTListDeclaration'
  list: ASTList
}

export const ASTListDeclaration = 'ASTListDeclaration'

export function isASTListDeclaration(
  item: unknown
): item is ASTListDeclaration {
  return reflection.isInstance(item, ASTListDeclaration)
}

export interface ASTRangeDeclaration extends ASTDeclaration {
  readonly $container: ASTScenario
  readonly $type: 'ASTRangeDeclaration'
  range: ASTRange
}

export const ASTRangeDeclaration = 'ASTRangeDeclaration'

export function isASTRangeDeclaration(
  item: unknown
): item is ASTRangeDeclaration {
  return reflection.isInstance(item, ASTRangeDeclaration)
}

export interface ASTParamDrift extends ASTParameter {
  readonly $container: ASTParameters
  readonly $type: 'ASTParamDrift'
  drift_op: T_MINUSMINUSEQUAL | T_PLUSPLUSEQUAL
}

export const ASTParamDrift = 'ASTParamDrift'

export function isASTParamDrift(item: unknown): item is ASTParamDrift {
  return reflection.isInstance(item, ASTParamDrift)
}

export interface ASTParamEdit extends ASTParameter {
  readonly $container: ASTParameters
  readonly $type: 'ASTParamEdit'
  keyword: T_EQUAL
}

export const ASTParamEdit = 'ASTParamEdit'

export function isASTParamEdit(item: unknown): item is ASTParamEdit {
  return reflection.isInstance(item, ASTParamEdit)
}

export interface ASTParamNoise extends ASTParameter {
  readonly $container: ASTParameters
  readonly $type: 'ASTParamNoise'
  keyword: T_MULEQUAL
}

export const ASTParamNoise = 'ASTParamNoise'

export function isASTParamNoise(item: unknown): item is ASTParamNoise {
  return reflection.isInstance(item, ASTParamNoise)
}

export interface ASTParamOffset extends ASTParameter {
  readonly $container: ASTParameters
  readonly $type: 'ASTParamOffset'
  offset_op: T_MINUSEQUAL | T_PLUSEQUAL
}

export const ASTParamOffset = 'ASTParamOffset'

export function isASTParamOffset(item: unknown): item is ASTParamOffset {
  return reflection.isInstance(item, ASTParamOffset)
}

export interface FditscenarioAstType {
  ASTAllPlanes: ASTAllPlanes
  ASTAlter: ASTAlter
  ASTAlterAndTrajectory: ASTAlterAndTrajectory
  ASTAt: ASTAt
  ASTAtFor: ASTAtFor
  ASTConstantValue: ASTConstantValue
  ASTCreate: ASTCreate
  ASTCreationParameter: ASTCreationParameter
  ASTCreationParameterType: ASTCreationParameterType
  ASTCreationParameters: ASTCreationParameters
  ASTCut: ASTCut
  ASTDeclaration: ASTDeclaration
  ASTDelay: ASTDelay
  ASTDelayParameter: ASTDelayParameter
  ASTDoubleRange: ASTDoubleRange
  ASTDoubleValue: ASTDoubleValue
  ASTFilters: ASTFilters
  ASTHide: ASTHide
  ASTHideParameter: ASTHideParameter
  ASTInstruction: ASTInstruction
  ASTIntegerRange: ASTIntegerRange
  ASTIntegerValue: ASTIntegerValue
  ASTLeftShift: ASTLeftShift
  ASTList: ASTList
  ASTListDeclaration: ASTListDeclaration
  ASTNumber: ASTNumber
  ASTNumberOffset: ASTNumberOffset
  ASTOffsetList: ASTOffsetList
  ASTParamDrift: ASTParamDrift
  ASTParamEdit: ASTParamEdit
  ASTParamNoise: ASTParamNoise
  ASTParamOffset: ASTParamOffset
  ASTParameter: ASTParameter
  ASTParameterType: ASTParameterType
  ASTParameters: ASTParameters
  ASTPlane: ASTPlane
  ASTRange: ASTRange
  ASTRangeDeclaration: ASTRangeDeclaration
  ASTRecordingParameterType: ASTRecordingParameterType
  ASTRecordingValue: ASTRecordingValue
  ASTReplay: ASTReplay
  ASTRightShift: ASTRightShift
  ASTRotate: ASTRotate
  ASTRotateParameter: ASTRotateParameter
  ASTSaturate: ASTSaturate
  ASTSaturationParameter: ASTSaturationParameter
  ASTSaturationParameterType: ASTSaturationParameterType
  ASTSaturationParameters: ASTSaturationParameters
  ASTScenario: ASTScenario
  ASTStringList: ASTStringList
  ASTStringValue: ASTStringValue
  ASTTarget: ASTTarget
  ASTTime: ASTTime
  ASTTimeScope: ASTTimeScope
  ASTTrajectory: ASTTrajectory
  ASTTrigger: ASTTrigger
  ASTValue: ASTValue
  ASTVariableValue: ASTVariableValue
  ASTWayPoint: ASTWayPoint
  ASTWayPoints: ASTWayPoints
  ASTWindow: ASTWindow
}

export class FditscenarioAstReflection extends AbstractAstReflection {
  getAllTypes(): string[] {
    return [
      'ASTAllPlanes',
      'ASTAlter',
      'ASTAlterAndTrajectory',
      'ASTAt',
      'ASTAtFor',
      'ASTConstantValue',
      'ASTCreate',
      'ASTCreationParameter',
      'ASTCreationParameterType',
      'ASTCreationParameters',
      'ASTCut',
      'ASTDeclaration',
      'ASTDelay',
      'ASTDelayParameter',
      'ASTDoubleRange',
      'ASTDoubleValue',
      'ASTFilters',
      'ASTHide',
      'ASTHideParameter',
      'ASTInstruction',
      'ASTIntegerRange',
      'ASTIntegerValue',
      'ASTLeftShift',
      'ASTList',
      'ASTListDeclaration',
      'ASTNumber',
      'ASTNumberOffset',
      'ASTOffsetList',
      'ASTParamDrift',
      'ASTParamEdit',
      'ASTParamNoise',
      'ASTParamOffset',
      'ASTParameter',
      'ASTParameterType',
      'ASTParameters',
      'ASTPlane',
      'ASTRange',
      'ASTRangeDeclaration',
      'ASTRecordingParameterType',
      'ASTRecordingValue',
      'ASTReplay',
      'ASTRightShift',
      'ASTRotate',
      'ASTRotateParameter',
      'ASTSaturate',
      'ASTSaturationParameter',
      'ASTSaturationParameterType',
      'ASTSaturationParameters',
      'ASTScenario',
      'ASTStringList',
      'ASTStringValue',
      'ASTTarget',
      'ASTTime',
      'ASTTimeScope',
      'ASTTrajectory',
      'ASTTrigger',
      'ASTValue',
      'ASTVariableValue',
      'ASTWayPoint',
      'ASTWayPoints',
      'ASTWindow',
    ]
  }

  protected override computeIsSubtype(
    subtype: string,
    supertype: string
  ): boolean {
    switch (subtype) {
      case ASTAllPlanes:
      case ASTPlane: {
        return this.isSubtype(ASTTarget, supertype)
      }
      case ASTAlterAndTrajectory:
      case ASTCreate:
      case ASTCut:
      case ASTDelay:
      case ASTHide:
      case ASTReplay:
      case ASTRotate:
      case ASTSaturate: {
        return this.isSubtype(ASTInstruction, supertype)
      }
      case ASTAt:
      case ASTWindow: {
        return this.isSubtype(ASTTimeScope, supertype)
      }
      case ASTConstantValue:
      case ASTNumberOffset:
      case ASTStringValue:
      case ASTVariableValue: {
        return this.isSubtype(ASTValue, supertype)
      }
      case ASTDoubleValue:
      case ASTIntegerValue: {
        return this.isSubtype(ASTNumber, supertype)
      }
      case ASTLeftShift:
      case ASTNumber:
      case ASTRightShift: {
        return this.isSubtype(ASTNumberOffset, supertype)
      }
      case ASTListDeclaration:
      case ASTRangeDeclaration: {
        return this.isSubtype(ASTDeclaration, supertype)
      }
      case ASTParamDrift:
      case ASTParamEdit:
      case ASTParamNoise:
      case ASTParamOffset: {
        return this.isSubtype(ASTParameter, supertype)
      }
      default: {
        return false
      }
    }
  }

  getReferenceType(refInfo: ReferenceInfo): string {
    const referenceId = `${refInfo.container.$type}:${refInfo.property}`
    switch (referenceId) {
      default: {
        throw new Error(`${referenceId} is not a valid reference id.`)
      }
    }
  }

  getTypeMetaData(type: string): TypeMetaData {
    switch (type) {
      case 'ASTCreationParameters': {
        return {
          name: 'ASTCreationParameters',
          mandatory: [{ name: 'items', type: 'array' }],
        }
      }
      case 'ASTFilters': {
        return {
          name: 'ASTFilters',
          mandatory: [{ name: 'filters', type: 'array' }],
        }
      }
      case 'ASTOffsetList': {
        return {
          name: 'ASTOffsetList',
          mandatory: [{ name: 'items', type: 'array' }],
        }
      }
      case 'ASTParameters': {
        return {
          name: 'ASTParameters',
          mandatory: [{ name: 'items', type: 'array' }],
        }
      }
      case 'ASTSaturationParameters': {
        return {
          name: 'ASTSaturationParameters',
          mandatory: [{ name: 'items', type: 'array' }],
        }
      }
      case 'ASTScenario': {
        return {
          name: 'ASTScenario',
          mandatory: [
            { name: 'declarations', type: 'array' },
            { name: 'instructions', type: 'array' },
          ],
        }
      }
      case 'ASTStringList': {
        return {
          name: 'ASTStringList',
          mandatory: [{ name: 'items', type: 'array' }],
        }
      }
      case 'ASTWayPoints': {
        return {
          name: 'ASTWayPoints',
          mandatory: [{ name: 'waypoints', type: 'array' }],
        }
      }
      default: {
        return {
          name: type,
          mandatory: [],
        }
      }
    }
  }
}

export const reflection = new FditscenarioAstReflection()
