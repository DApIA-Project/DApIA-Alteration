"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFditscenarioServices = exports.FditscenarioModule = void 0;
const langium_1 = require("langium");
const module_1 = require("./generated/module");
const fditscenario_validator_1 = require("./fditscenario-validator");
const langium_2 = require("langium");
const web_1 = require("../web");
/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
exports.FditscenarioModule = {
    validation: {
        FditscenarioValidator: () => new fditscenario_validator_1.FditscenarioValidator()
    },
};
/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
function createFditscenarioServices(context) {
    const shared = (0, langium_1.inject)((0, langium_1.createDefaultSharedModule)(context), module_1.FditscenarioGeneratedSharedModule);
    const Fditscenario = (0, langium_1.inject)((0, langium_1.createDefaultModule)({ shared }), module_1.AttackScenarioGrammarGeneratedModule, exports.FditscenarioModule);
    shared.lsp.ExecuteCommandHandler = new FditscenarioCommandHandler();
    shared.ServiceRegistry.register(Fditscenario);
    (0, fditscenario_validator_1.registerValidationChecks)(Fditscenario);
    return { shared, Fditscenario };
}
exports.createFditscenarioServices = createFditscenarioServices;
class FditscenarioCommandHandler extends langium_2.AbstractExecuteCommandHandler {
    registerCommands(acceptor) {
        // accept a single command called 'parseAndGenerate'
        acceptor('parseAndGenerate', args => {
            // invoke generator on this data, and return the response
            return (0, web_1.parseAndGenerate)(args[0], args[1], args[2], args[3]);
        });
    }
}
